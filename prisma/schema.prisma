generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int              @id @default(autoincrement())
  role_id            Int
  name               String           @db.VarChar(255)
  email              String           @db.VarChar(255)
  password           String           @db.VarChar(255)
  phone              String?          @db.VarChar(15)
  img_url            String?          @db.VarChar(255)
  poin               Int?
  email_verified_at  DateTime?        @db.Timestamp(0)
  verification_token String?          @db.VarChar(255)
  expires_at         DateTime?        @db.Timestamp(0)
  created_at         DateTime         @default(now()) @db.Timestamp(0)
  updated_at         DateTime         @default(now()) @updatedAt @db.Timestamp(0)
  delete_at          DateTime?         @db.Timestamp(0)
  status             String?          @db.VarChar(255)
  favorite_menus     FavoriteMenu[]
  kritik_saran       KritikSaran[]
  orders_as_cashier  Order[]          @relation("CashierOrders")
  orders_as_customer Order[]          @relation("CustomerOrders")
  point_histories    PointHistory[]
  rating_riviews     rating_riviews[]
  refresh_tokens     RefreshToken[]
  reservations       reservations[]
  role               Role             @relation(fields: [role_id], references: [id], map: "fk_user_role")

  @@index([role_id], map: "fk_user_role")
  @@map("users")
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(0)
  users      User[]

  @@map("roles")
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String   @db.VarChar(255)
  expires_at DateTime @db.DateTime(0)
  user_agent String   @db.Text
  ip_address String   @db.VarChar(45)
  created_at DateTime @default(now()) @db.Timestamp(0)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_refresh_user")

  @@index([user_id], map: "fk_refresh_user")
  @@map("refresh_tokens")
}

model Table {
  id         Int      @id @default(autoincrement())
  number     Int
  status     String   @db.VarChar(20)
  created_at DateTime @default(now()) @db.Timestamp(0)
  delete_at  DateTime?         @db.Timestamp(0)
  orders     Order[]

  @@map("tables")
}

model Order {
  id                  Int            @id @default(autoincrement())
  order_code          String         @db.VarChar(255) @unique
  customer_id         Int?
  cashier_id          Int?
  table_id            Int?
  promo_id            Int?
  customer_name       String         @db.VarChar(255)
  cashier_name        String?        @db.VarChar(255)
  total_price         Int
  promo_value         Int?
  points_value_used   Int?
  payment_method      String?         @db.VarChar(20)
  status              String         @db.VarChar(20)
  cancellation_reason String?        @db.VarChar(255)
  note                String?        @db.VarChar(255)
  is_rated            Boolean        @default(false)
  payment_url         String?        @db.VarChar(255)
  payment_token       String?        @db.VarChar(255)
  created_at          DateTime       @db.DateTime(0)
  updated_at          DateTime       @db.DateTime(0)
  order_items         OrderItem[]
  cashier             User?          @relation("CashierOrders", fields: [cashier_id], references: [id], map: "fk_order_cashier")
  customer            User?          @relation("CustomerOrders", fields: [customer_id], references: [id], map: "fk_order_customer")
  promo               Promo?         @relation(fields: [promo_id], references: [id], map: "fk_order_promo")
  table               Table?         @relation(fields: [table_id], references: [id], map: "fk_order_table")
  point_history       PointHistory[]

  @@index([cashier_id], map: "fk_order_cashier")
  @@index([customer_id], map: "fk_order_customer")
  @@index([promo_id], map: "fk_order_promo")
  @@index([table_id], map: "fk_order_table")
  @@map("orders")
}

model OrderItem {
  id                   Int              @id @default(autoincrement())
  order_id             Int
  menu_id              Int?
  name_menu            String           @db.VarChar(255)
  quantity             Int
  price_at_transaction Int
  cogs_at_transaction  Int
  subtotal             Int
  order                Order            @relation(fields: [order_id], references: [id], onDelete: Cascade, map: "fk_item_order")
  menu                 Menu?            @relation(fields: [menu_id], references: [id], map: "fk_items_menu")
  rating_riviews       rating_riviews[]

  @@index([order_id], map: "fk_item_order")
  @@index([menu_id], map: "fk_items_menu")
  @@map("order_items")
}

model Promo {
  id               Int         @id @default(autoincrement())
  promo_code       String      @db.VarChar(255)
  name             String      @db.VarChar(255)
  description      String      @db.VarChar(255)
  img_url          String      @db.VarChar(255)
  promo_type       String      @db.VarChar(255)
  percent_value    Int?
  amount_value     Int?
  status           String      @db.VarChar(255)
  minimum_purchase Int?        @map("minium_purchase")
  start_date       DateTime    @db.Date
  end_date         DateTime    @db.Date
  delete_at        DateTime?    @db.Timestamp(0)
  orders           Order[]
  promo_menus      PromoMenu[]

  @@map("promos")
}

model PromoMenu {
  promo_id Int
  menu_id  Int
  menu     Menu  @relation(fields: [menu_id], references: [id], onDelete: Cascade, map: "fk_condition_menu")
  promo    Promo @relation(fields: [promo_id], references: [id], onDelete: Cascade, map: "fk_condition_promo")

  @@id([promo_id, menu_id])
  @@index([menu_id], map: "fk_condition_menu")
  @@map("promo_menu_condition")
}

model Menu {
  id               Int              @id @default(autoincrement())
  category_id      Int?
  name             String           @db.VarChar(255)
  description      String           @db.VarChar(255)
  image_url        String           @db.VarChar(255)
  current_price    Int
  current_cogs     Int
  status           String           @db.VarChar(255)
  created_at       DateTime         @default(now()) @db.Timestamp(0)
  updated_at       DateTime         @default(now()) @updatedAt @db.Timestamp(0)
  delete_at        DateTime?         @db.Timestamp(0)
  favorite_menus   FavoriteMenu[]
  category         menu_categories? @relation(fields: [category_id], references: [id], map: "fk_menu_kategori")
  order_items      OrderItem[]
  promo_conditions PromoMenu[]
  rating_riviews   rating_riviews[]

  @@index([category_id], map: "fk_menu_kategori")
  @@map("menus")
}

model FavoriteMenu {
  user_id    Int
  menu_id    Int
  created_at DateTime @default(now()) @db.Timestamp(0)
  menu       Menu     @relation(fields: [menu_id], references: [id], onDelete: Cascade, map: "fk_favorit_menu")
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_favorit_user")

  @@id([user_id, menu_id])
  @@index([menu_id], map: "fk_favorit_menu")
  @@map("favorite_menu")
}

model KritikSaran {
  id         Int      @id @default(autoincrement())
  user_id    Int?
  topic      String   @db.VarChar(255)
  message    String   @db.VarChar(255)
  status     String   @db.VarChar(20)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(0)
  user       User?    @relation(fields: [user_id], references: [id], map: "fk_feedback_user")

  @@index([user_id], map: "user_id")
  @@map("kritik_saran")
}

model PointHistory {
  id         Int      @id @default(autoincrement())
  user_id    Int
  order_id   Int?
  amount     Int
  type       String   @db.VarChar(20)
  created_at DateTime @default(now()) @db.Timestamp(0)
  order      Order?   @relation(fields: [order_id], references: [id], map: "fk_point_order")
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_point_user")

  @@index([order_id], map: "order_id")
  @@index([user_id], map: "user_id")
  @@map("point_histories")
}

model menu_categories {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  delete_at   DateTime?   @db.Timestamp(0)
  menus Menu[]
}

model rating_riviews {
  id            Int       @id @default(autoincrement())
  user_id       Int
  menu_id       Int
  order_item_id Int
  rating        Int
  comment       String    @db.VarChar(255)
  created_at    DateTime  @default(now()) @db.Timestamp(0)
  menus         Menu      @relation(fields: [menu_id], references: [id], onDelete: Cascade, map: "fk_rating_menu")
  order_items   OrderItem @relation(fields: [order_item_id], references: [id], onDelete: Cascade, map: "fk_rating_order")
  users         User      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_rating_user")

  @@index([menu_id], map: "fk_rating_menu")
  @@index([order_item_id], map: "fk_rating_order")
  @@index([user_id], map: "fk_rating_user")
}

model reservations {
  id                  Int      @id @default(autoincrement())
  reservation_code    String   @db.VarChar(255)
  user_id             Int?
  reservation_time    DateTime @db.DateTime(0)
  number_of_guest     Int
  status              String   @db.VarChar(20)
  cancellation_reason String?  @db.Text
  checkin_code        String?  @db.VarChar(50)
  created_at          DateTime @db.Timestamp(0)
  update_at           DateTime @db.Timestamp(0)
  users               User?    @relation(fields: [user_id], references: [id], map: "fk_reservation_user")

  @@index([user_id], map: "fk_reservation_user")
}
